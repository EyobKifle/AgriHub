AgriHub - System Features Documentation
=======================================

This document details the features and functionality of the AgriHub platform, explaining the flow from user interface (UI) to database interactions.


1. User Authentication & Profile Management
-------------------------------------------

1.1. Registration & Login
- Flow: Users can sign up with their name, email, phone, and location. The system hashes the password and stores the new user in the `users` table. Login validates credentials against this table.
- Tables: `users`

1.2. Profile Management
- Flow: Once logged in, a user can navigate to "My Profile". This page allows them to view and edit their information.
- UI to DB Interaction:
  - The frontend (`Js/User-Profile.js`) makes a `GET` request to `/php/api/profile.php` to fetch the current user's data.
  - The form supports updating basic info (`name`, `phone`, `location`), extended profile data (`bio`, `farm_size_hectares`, `specialization`, etc.), and preferences (`language`, `theme`, `email_notifications`).
  - A file input allows uploading a new profile picture (`avatar_url`).
  - On submission, the frontend sends a `POST` request with all form data (including the avatar file) to `/php/api/profile.php`.
  - The backend API handles updating the `users` and `user_profiles` tables, including processing the file upload.
- Tables: `users`, `user_profiles`


2. Marketplace
--------------

2.1. Product Viewing & Filtering
- Flow: The main marketplace page displays a grid of products. Users can filter by category, price range, and a search term. They can also sort the results.
- UI to DB Interaction:
  - The frontend JavaScript (`Js/marketplace.js`) makes `fetch` requests to `/php/api/ProductApi.php`.
  - `action=get_products`: The API constructs a dynamic SQL query based on the filter parameters (`category`, `min_price`, `max_price`, `search`, `sort`). It joins `products`, `categories`, `users`, and `product_images` to get all necessary data. The results are returned as JSON.
  - `action=get_categories`: The API fetches all category slugs and their corresponding active product counts from the `categories` table. This is used to dynamically build the category filter list in the sidebar.
- Tables: `products`, `categories`, `users`, `product_images`

2.2. Product Creation & Management (My Listings)
- Flow: Logged-in users can create, view, update, and delete their own product listings from the "My Listings" section of their dashboard.
- UI to DB Interaction:
  - The frontend (`Js/User-Listings.js`) interacts with a dedicated API at `/php/api/listings.php`.
  - `GET`: Fetches all listings for the logged-in user.
  - `POST`: Creates a new listing or updates an existing one. The form data, including product images, is sent. The backend handles inserting/updating the `products` table and managing `product_images`.
  - `POST` with `action=delete_listing`: Deletes a specified product.
- Tables: `products`, `product_images`, `categories` (for dropdown).

2.3. Order & Checkout (To Be Implemented)
- Flow:
  1. "Add to Cart" buttons on product cards will add a product ID and quantity to a client-side cart (e.g., in `localStorage` or a session).
  2. A dedicated cart page will display items, allowing users to adjust quantities or remove items.
  3. The checkout process will collect a `delivery_address`.
  4. On confirmation, the frontend will send the cart contents and address to a new API endpoint.
  5. This endpoint will call the `sp_CreateOrder` stored procedure, passing the buyer's ID, address, and a JSON array of order items.
- Stored Procedure: `sp_CreateOrder` handles the entire order creation logic within a transaction, including decrementing stock in the `products` table and creating records in `orders` and `order_items`.
- Tables: `orders`, `order_items`, `products`


3. Community & Discussions
--------------------------

3.1. Discussion Management (My Discussions)
- Flow: Users can view discussions they have started and create new ones.
- UI to DB Interaction:
  - The frontend (`Js/User-Discussions.js`) interacts with `/php/api/discussions.php`.
  - `GET`: Fetches all discussions started by the user, along with all available categories for the "create" form dropdown.
  - `POST`: Submits the new discussion (title, content, category) to be saved in the `discussions` table.
- Tables: `discussions`, `discussion_categories`

3.2. Real-time Chat (on `discussion.php`)
- Flow: On a single discussion page, users see a real-time chat interface for that topic. They can send, edit, and delete their own messages.
- UI to DB Interaction:
  - The frontend (`Js/chat.js`, `Js/chat-ui.js`) communicates with a RESTful API at `/php/api/chat.php`.
  - `GET`: Fetches all messages for the current `discussion_id`.
  - `POST`: Adds a new message. The message object (user, text, attachments) is sent as a JSON body.
  - `PUT`: Updates an existing message's text content.
  - `DELETE`: Deletes a message.
- Tables: `discussion_messages` (or similar), `discussions`

3.3. Private Messaging (My Messages)
- Flow: Users can view their private conversation list and send new messages from their dashboard.
- UI to DB Interaction: The frontend (`Js/User-Messages.js`) uses `/php/api/messages.php` to fetch conversation lists and send new messages.
- Tables: `conversations`, `messages`


4. Reviews, Reports, & Favorites (To Be Implemented)
----------------------------------------------------

4.1. Reviews
- Flow: After an order is marked as "delivered", a "Leave a Review" button will appear on the user's order detail page.
- UI to DB Interaction: The user submits a rating (1-5) and a comment. This data is sent to an API endpoint that inserts a new record into the `reviews` table, linked to the `product_id`, `reviewer_id`, and `order_item_id` to verify the purchase.
- Tables: `reviews`, `order_items`

4.2. Reports
- Flow: A "Report" button will be available on products, discussions, and comments.
- UI to DB Interaction: Clicking the button opens a modal where the user can state a reason. The submission sends the `reported_item_type`, `reported_item_id`, and `reason` to an API endpoint, which inserts a new record into the `reports` table for admin review.
- Tables: `reports`

4.3. Favorites (Wishlist)
- Flow: A "Save" or "Add to Wishlist" icon will be on each product card.
- UI to DB Interaction: Clicking the icon triggers a JavaScript `fetch` call to an API endpoint (e.g., `api/favorite.php?product_id=...`). The backend will `INSERT` a record into the `user_favorites` table, linking the `user_id` and `product_id`. Clicking again would `DELETE` the record.
- Tables: `user_favorites`